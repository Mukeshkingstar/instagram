{
  "version": 3,
  "sources": ["../../@formcarry/react/src/lib/handler.ts", "../../@formcarry/react/src/index.ts"],
  "sourcesContent": ["import { FormcarryResponse } from './types'\n\nconst backgroundColor = '#262335'\nconst backgroundProperty = `background-color: ${backgroundColor}`\nconst yellow = '#FEDE5D'\nconst pink = '#D86FD4'\nconst orange = '#F88839'\nconst gray = '#E2E1E5'\nconst grayDarker = '#B3AEAE'\nconst turquoise = '#36F5F3'\nconst lightBlue = '#84C9F4'\n\nexport function errorHandler(err: FormcarryResponse) {\n\tconsole.group('%c ðŸš¨ Formcarry Error ðŸš¨', 'background: #E44141; color: #fff')\n\tconsole.table(err)\n\tconsole.log(\n\t\t`%cif you want to disable debugging, just set debug to false like:`,\n\t\t'color: #11C759',\n\t)\n\tconsole.log(\n\t\t'%cconst %c{state, submit} %c= %cuseForm%c(%c{ %cdebug%c: %cfalse %c}%c);',\n\t\t`${backgroundProperty}; color: ${yellow}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t\t`${backgroundProperty}; color: ${gray}`,\n\t\t`${backgroundProperty}; color: ${turquoise}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t\t`${backgroundProperty}; color: ${turquoise}`,\n\t\t`${backgroundProperty}; color: ${yellow}`,\n\t\t`${backgroundProperty}; color: ${grayDarker}`,\n\t\t`${backgroundProperty}; color: ${orange}`,\n\t\t`${backgroundProperty}; color: ${lightBlue}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t)\n\tconsole.groupEnd()\n}\n\nexport function noIdHandler() {\n\tconsole.log(\n\t\t'%cðŸ’¥ Please set your form ID, you can get it from your dashboard: https://formcarry.com/profile/my-forms',\n\t\t'background-color: #FCB56D; color: #000',\n\t)\n\tconsole.log(\n\t\t'%cconst %c{state, submit} %c= %cuseForm%c(%c{ %cid%c: %c\"Your Form ID\" %c}%c);',\n\t\t`${backgroundProperty}; color: ${yellow}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t\t`${backgroundProperty}; color: ${gray}`,\n\t\t`${backgroundProperty}; color: ${turquoise}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t\t`${backgroundProperty}; color: ${turquoise}`,\n\t\t`${backgroundProperty}; color: ${yellow}`,\n\t\t`${backgroundProperty}; color: ${grayDarker}`,\n\t\t`${backgroundProperty}; color: ${orange}`,\n\t\t`${backgroundProperty}; color: ${lightBlue}`,\n\t\t`${backgroundProperty}; color: ${pink}`,\n\t)\n}\n", "import React, { useState, useEffect } from 'react'\nimport { Props, FormcarryResponse } from './lib/types'\nimport { errorHandler, noIdHandler } from './lib/handler'\n\nfunction useForm(props: Props) {\n\tconst { id, debug = true, extraData } = props\n\tconst [submitted, setSubmitted] = useState<boolean>(false)\n\tconst [submitting, setSubmitting] = useState<boolean>(false)\n\tconst [error, setError] = useState<any>(undefined)\n\tconst [response, setResponse] = useState<FormcarryResponse>()\n\n\tuseEffect(() => {\n\t\tif (error && debug) {\n\t\t\terrorHandler(error)\n\t\t}\n\t}, [debug, error])\n\n\tfunction submit(event: React.FormEvent<HTMLFormElement>) {\n\t\t// prevent redirection\n\t\tevent.preventDefault()\n\n\t\tif (!id) {\n\t\t\tnoIdHandler()\n\t\t\treturn\n\t\t}\n\n\t\tconst data = new FormData(event.currentTarget)\n\n\t\tif (typeof extraData === 'object') {\n\t\t\tfor (const item in extraData) {\n\t\t\t\tif (extraData.hasOwnProperty(item)) {\n\t\t\t\t\tdata.append(item, extraData[item])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// reset states.\n\t\tsetSubmitted(false)\n\t\tsetError(undefined)\n\t\tsetResponse(undefined)\n\n\t\tsetSubmitting(true)\n\n\t\tfetch(`https://formcarry.com/s/${id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { Accept: 'application/json' },\n\t\t\tbody: data,\n\t\t})\n\t\t\t.then(res => res.json())\n\t\t\t.then((res: FormcarryResponse) => {\n\t\t\t\tif (res.code === 200) {\n\t\t\t\t\tsetSubmitted(true)\n\t\t\t\t\tsetResponse(res)\n\t\t\t\t} else {\n\t\t\t\t\tsetError(res)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tsetError(err)\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetSubmitting(false)\n\t\t\t})\n\t}\n\n\treturn { state: { error, response, submitting, submitted }, submit }\n}\n\nexport { useForm }\n"],
  "mappings": ";;;;;;;AAEA,IAAMA,kBAAkB;AACxB,IAAMC,qBAAkB,uBAAwBD;AAChD,IAAME,SAAS;AACf,IAAMC,OAAO;AACb,IAAMC,SAAS;AACf,IAAMC,OAAO;AACb,IAAMC,aAAa;AACnB,IAAMC,YAAY;AAClB,IAAMC,YAAY;SAEFC,aAAaC,KAAsB;UAC3C,MAAM,4BAA2B,kCAAE;UACnC,MAAM,GAACA;UACP;IAIPC;IAcAA;EACD;UAEgBC;IACfD;IAIAA,qBACC,cAAA;IAaF,qBAAA,cAAA;;ICnDA,qBAA6B,cAAA;IAC5B,qBAAU,cAAA;yBAA8BE,cAAvB;yBAAA,cAAA;yBAASC,cAAS;IACnC,qBAAkCC,cAAwB;yBAA1C,cAAA;yBAAc,cAAA;;UACvBC,SAAU;;SACjB,cAA0BD;UAAd;;IACZ;;UAAiBE;IAEjBC;yBACmB,cAAE;yBACNC,cAAM;;yBAEH,cAAA;IAElB,qBAAuD,cAAA;yBAEhDC,cAAgB;yBAEb,cAAA;yBACK,cAAA;yBACb,cAAA;;yBAGgBC,cAAeC;;;iBAKxBC,OAAOC;oHAMfC,MAAa;MACbC,gBAASC,uBAAU,KAAA,eACnBV,UAAYU,CAAS,kBAER,UAAM,CAAA;MAEnBC,iBAAK,uBAAA,KAAA,gBACI,WAAM,CAAA,mBACL,WAAA,CAAA;uBAAU,uBAAA,MAAA,WAAoB,WAAA,CAAA,cACjCC,WAAAA,CAAAA;MACN,iBACM,uBAAG,cAAIC,WAAU,CAAA,iBACjB,WAAuB,CAAA;;eAE3BL;mBACAR,OAAe;qBACT,KAAA;;;YAGN,KACI;;WAEJ,OACM,OAAC;UACRc,eAAc;QACb,CAAA,IAAA;;AAGJ;;QAAkBZ,OAAAA,IAAAA,SAAK,MAAA,aAAA;QAAEa,OAAAA,cAAQ,UAAA;eAAEhB,QAAAA,WAAU;YAAEiB,UAAAA,eAAAA,IAAAA,GAAAA;AAAW,eAAA,OAAA,MAAA,UAAA,IAAA,CAAA;QAAEC;MAAQ;IACrE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": ["backgroundColor", "backgroundProperty", "yellow", "pink", "orange", "gray", "grayDarker", "turquoise", "lightBlue", "errorHandler", "err", "console", "noIdHandler", "props", "extraData", "useState", "submitting", "setResponse", "useEffect", "error", "preventDefault", "FormData", "currentTarget", "append", "item", "setSubmitted", "setError", "undefined", "fetch", "data", "res", "setSubmitting", "response", "submitted", "submit"]
}
